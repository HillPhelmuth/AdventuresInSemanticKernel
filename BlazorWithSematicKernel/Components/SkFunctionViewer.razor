
<RadzenRow>
    <RadzenColumn Size="12" Style="max-height: 75vh; overflow: auto">
        <RadzenText Style="color:black !important" Text="@Header" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5"></RadzenText>
        @if (ExecutionType != ExecutionType.SingleFunction)
        {
            <RadzenButton Text="Execute" Icon="chat" Click="@(() => SelectionComplete.InvokeAsync())"></RadzenButton>
        }
        
        <RadzenRow>
            @foreach (var function in Functions)
            {
                var functionview = function.Value.Metadata;
                <RadzenColumn Size="4">
                    <RadzenCard>
                        <RadzenText TextStyle="TextStyle.Caption">Plugin: @functionview.PluginName</RadzenText>
                        <RadzenText TextAlign="TextAlign.Center" TextStyle="TextStyle.DisplayH6" Text="@functionview.Name"></RadzenText>

                        <RadzenCard>
                            <RadzenText Text="@functionview.Description" TextStyle="TextStyle.Body1"></RadzenText>
                            @if (HasPrompt(function.Value))
                            {
                                <RadzenButton Size="ButtonSize.ExtraSmall" Icon="search" Text="prompt" Click="@(() => ShowPrompt(function.Value))"></RadzenButton>
                            }
                           
                        </RadzenCard>
                        @if (IsPlanner)
                        {
                            <RadzenCard>
                                <RadzenButton MouseEnter="@((args) => ShowTooltip(args, "Prevent inclusion in Plan"))" Icon="@(ExcludedFunctions.Contains(functionview.Name) ? "unpublished" : "")" Size="ButtonSize.ExtraSmall" Text="Exclude Function" Click="@(() => ExcludeFunction(functionview.Name))"></RadzenButton>
                                <RadzenButton Icon="@(RequiredFunctions.Contains(functionview.Name) ? "check_circle" : "")" MouseEnter="@((args) => ShowTooltip(args, "Require inclusion in Plan"))" Size="ButtonSize.ExtraSmall" Text="Require Function" Click="@(() => RequireFunction(functionview.Name))"></RadzenButton>
                            </RadzenCard>
                        }
                        @if (ExecutionType == ExecutionType.ChainFunctions)
                        {
                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="Select Function" Click="@(() => ShowFunctionForm(functionview.PluginName, functionview.Name, function.Value, function.Value.Metadata.Parameters))"></RadzenButton>
                        }
                        @if (functionview.Parameters?.Count > 0 && functionview.Parameters?.All(x => x.Name.Equals("input", StringComparison.InvariantCultureIgnoreCase)) != true && ExecutionType != ExecutionType.ChainFunctions)
                        {
                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="View Inputs" Click="@(() => ShowParameters(functionview.Parameters, functionview.PluginName, functionview.Name))"></RadzenButton>
                        }
                        @if (ExecutionType == ExecutionType.SingleFunction)
                        {
                            <RadzenButton Size="ButtonSize.ExtraSmall" Text="Select Function" Click="@(() => SelectFunction(function))"></RadzenButton>
                        
                        }
                        @if (_visibleFunctionForm == $"{functionview.PluginName}-{functionview.Name}")
                        {
                            <RadzenTemplateForm Data="_functionForm" TItem="FunctionForm" Submit="SelectFunction">
                                <RadzenFormField Text="Order">
                                    <RadzenNumeric @bind-Value="_functionForm.Order"></RadzenNumeric>
                                </RadzenFormField>
                                @foreach (var field in _functionForm.Fields.Where(x => !x.Name.Equals("input", StringComparison.OrdinalIgnoreCase)))
                                {
                                    <RadzenFormField Text="@($"Variable Name: {field.Name}")" Variant="Variant.Filled">
                                        <ChildContent>
                                            <RadzenTextBox @bind-Value="@field.Value" Placeholder="Variable Value"></RadzenTextBox>
                                        </ChildContent>
                                        <Helper>
                                            <RadzenText TextStyle="TextStyle.Caption" Text="@field.Description"></RadzenText>
                                            <RadzenRequiredValidator Visible="@(!IsSequential && !IsStepwise)"></RadzenRequiredValidator>
                                        </Helper>
                                    </RadzenFormField>

                                }
                                <RadzenButton Size="ButtonSize.Small" ButtonType="ButtonType.Submit" Text="Add to chain"></RadzenButton>
                            </RadzenTemplateForm>
                        }
                        @if (_visiblePluginFunction == $"{functionview.PluginName}-{functionview.Name}")
                        {
                            <RadzenTemplateForm Data="_paramForm" TItem="ParamViewForm" Submit="Submit">
                                @foreach (var field in _paramForm.Fields.Where(x => !x.Name.Equals("input", StringComparison.InvariantCultureIgnoreCase)))
                                {
                                    <RadzenFormField Text="@($"Variable Name: {field.Name}")" Variant="Variant.Filled">
                                        <ChildContent>
                                            <RadzenTextBox ReadOnly="@(ExecutionType == ExecutionType.SingleFunction)" @bind-Value="@field.Value" Placeholder="Variable Value"></RadzenTextBox>
                                        </ChildContent>
                                        <Helper>
                                            <RadzenText TextStyle="TextStyle.Caption" Text="@field.Description"></RadzenText>
                                            <RadzenRequiredValidator Visible="@(!IsSequential && !IsStepwise)"></RadzenRequiredValidator>
                                        </Helper>
                                    </RadzenFormField>

                                }
                                @if (ExecutionType != ExecutionType.SingleFunction)
                                {
                                    <RadzenButton Size="ButtonSize.Small" ButtonType="ButtonType.Submit" Text="Set Variables"></RadzenButton>
                                }

                            </RadzenTemplateForm>
                        }
                    </RadzenCard>

                </RadzenColumn>
            }
        </RadzenRow>
    </RadzenColumn>

</RadzenRow>